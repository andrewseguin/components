@use '../core/theming/inspection';
@use '../core/tokens/token-utils';
@use '../core/tokens/m3-utils';
@use '../core/typography/typography';
@use './select-tokens';
@use 'sass:map';
@use 'sass:meta';

/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)
/// for the mat-select.
/// @param {Map} $theme The theme to generate base styles for.
@mixin base($theme) {
  $system: m3-utils.get-system($theme);
  $base-tokens: map.get(select-tokens.get($system), base);
  @include token-utils.create-token-values($base-tokens, map.get($theme, version));
}

/// Outputs color theme styles for the mat-select.
/// @param {Map} $theme The theme to generate color styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin color($theme, $color-variant: null) {
  $system: m3-utils.get-system($theme);
  $system: m3-utils.replace-colors-with-variant($system, primary, $color-variant);
  $color-tokens: map.get(select-tokens.get($system), color);
  @include token-utils.create-token-values($color-tokens, map.get($theme, version));

  @if map.get($system, version) == 'm2' {
    .mat-mdc-form-field.mat-accent {
      $system: m3-utils.replace-colors-with-variant($system, primary, secondary);
      $color-tokens: map.get(select-tokens.get($system), color);
      @include token-utils.create-token-values($color-tokens, map.get($theme, version));
    }

    .mat-mdc-form-field.mat-warn {
      $system: m3-utils.replace-colors-with-variant($system, primary, error);
      $color-tokens: map.get(select-tokens.get($system), color);
      @include token-utils.create-token-values($color-tokens, map.get($theme, version));
    }
  }
}

/// Outputs typography theme styles for the mat-select.
/// @param {Map} $theme The theme to generate typography styles for.
@mixin typography($theme) {
  $system: m3-utils.get-system($theme);
  $typography-tokens: map.get(select-tokens.get($system), typography);
  @include token-utils.create-token-values($typography-tokens, map.get($theme, version));
}

/// Outputs typography theme styles for the mat-select.
/// @param {Map} $theme The theme to generate density styles for.
@mixin density($theme) {
  // If $theme is just referencing a scale, convert it to a theme config.
  @if (meta.type-of($theme) != map) {
    $theme: (scale: $theme, version: 'm2', _mat-system: ());
  }
  $system: m3-utils.get-system($theme);
  $density-tokens: map.get(select-tokens.get($system), density);
  @include token-utils.create-token-values($density-tokens, map.get($theme, version));
}

/// Defines the tokens that will be available in the `overrides` mixin and for docs extraction.
@function _define-overrides() {
  @return (
    (
      namespace: select,
      tokens: token-utils.get-overrides(select-tokens.get(), select)
    ),
  );
}

/// Outputs the CSS variable values for the given tokens.
/// @param {Map} $tokens The token values to emit.
@mixin overrides($tokens: ()) {
    @include token-utils.batch-create-token-values($tokens, _define-overrides());
}

/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.
/// @param {Map} $theme The theme to generate styles for.
/// @param {String} $color-variant The color variant to use for the component (M3 only)
@mixin theme($theme, $color-variant: null) {
  $system: m3-utils.get-system($theme);
  @if map.get($theme, version) == 'm2' {
    @include base($theme);
    @if inspection.theme-has($theme, color) {
      @include color($theme);
    }
    @if inspection.theme-has($theme, density) {
      @include density($theme);
    }
    @if inspection.theme-has($theme, typography) {
      @include typography($theme);
    }
  } @else {
    @include base($theme);
    @include color($theme, $color-variant);
    @include density($theme);
    @include typography($theme);
  }
}
