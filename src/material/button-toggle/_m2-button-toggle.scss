@use 'sass:map';
@use 'sass:meta';
@use '../core/tokens/m2-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';
@use '../core/style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, button-toggle);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    focus-state-layer-opacity: 0.12,
    hover-state-layer-opacity: 0.04,
    legacy-focus-state-layer-opacity: 1,
    legacy-height: 36px,
    legacy-shape: 2px,
    shape: 4px,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  $theme-divider-color: inspection.get-theme-color($theme, foreground, base-12);

  // By default the theme usually has an rgba color for the dividers, which can
  // stack up with the background of a button toggle. This can cause the border
  // of a selected toggle to look different from an unselected one. We use a solid
  // color to ensure that the border always stays the same.
  $divider-color: if(
      meta.type-of($theme-divider-color) == color,
      theming.private-rgba-to-hex(
          $theme-divider-color, inspection.get-theme-color($theme, background, surface)),
      $theme-divider-color);

  @return (
    background-color: inspection.get-theme-color($theme, background, surface),
    disabled-selected-state-background-color:
        inspection.get-theme-color($theme, background, grey-800-400),
    disabled-selected-state-text-color: inspection.get-theme-color($theme, foreground, on-surface),
    disabled-state-background-color: inspection.get-theme-color($theme, background, surface),
    disabled-state-text-color: inspection.get-theme-color($theme, foreground, base-30-26),
    divider-color: $divider-color,
    legacy-disabled-selected-state-background-color:
        inspection.get-theme-color($theme, background, grey-800-400),
    legacy-disabled-state-background-color:
        inspection.get-theme-color($theme, background, black-grey200),
    legacy-disabled-state-text-color:
        inspection.get-theme-color($theme, foreground, base-30-26),
    legacy-selected-state-background-color:
        inspection.get-theme-color($theme, background, grey-900-300),
    legacy-selected-state-text-color:
        inspection.get-theme-color($theme, foreground, base-70-54),
    legacy-state-layer-color: inspection.get-theme-color($theme, background, white-black-12),
    legacy-text-color: inspection.get-theme-color($theme, foreground, base-50-38),
    selected-state-background-color:
        inspection.get-theme-color($theme, background, grey-900-300),
    selected-state-text-color: inspection.get-theme-color($theme, foreground, on-surface),
    state-layer-color: inspection.get-theme-color($theme, background, white-black),
    text-color: inspection.get-theme-color($theme, foreground, on-surface),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    label-text-font: inspection.get-theme-typography($theme, body-1, font-family),
    label-text-line-height: inspection.get-theme-typography($theme, body-1, line-height),
    label-text-size: inspection.get-theme-typography($theme, body-1, font-size),
    label-text-tracking: inspection.get-theme-typography($theme, body-1, letter-spacing),
    label-text-weight: inspection.get-theme-typography($theme, body-1, font-weight),
    legacy-label-text-font: inspection.get-theme-typography($theme, body-1, font-family),
    legacy-label-text-line-height: inspection.get-theme-typography($theme, body-1, line-height),
    legacy-label-text-size: inspection.get-theme-typography($theme, body-1, font-size),
    legacy-label-text-tracking: inspection.get-theme-typography($theme, body-1, letter-spacing),
    legacy-label-text-weight: inspection.get-theme-typography($theme, body-1, font-weight),
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $density-scale: theming.clamp-density(inspection.get-theme-density($theme), -4);
  $size-scale: (
    0: 48px,
    -1: 44px,
    -2: 40px,
    -3: 36px,
    -4: 24px,
  );

  @return (
    height: map.get($size-scale, $density-scale)
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
      get-unthemable-tokens(),
      get-color-tokens(m2-utils.$placeholder-color-config),
      get-typography-tokens(m2-utils.$placeholder-typography-config),
      get-density-tokens(m2-utils.$placeholder-density-config)
  );
}
