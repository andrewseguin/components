@use 'sass:map';
@use '../core/style/sass-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';
@use '../core/typography/typography';
@use '../core/tokens/token-utils';
@use 'm2-tokens' as m2-tokens;
@use 'm3-tokens' as m3-tokens;

@mixin base($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.define-token-values(
        m3-tokens.get-unthemable-tokens($theme)
    );
  } @else {
    @include sass-utils.current-selector-or-root() {
      @include token-utils.define-token-values-mixed(
        m2-tokens.get-unthemable-tokens()
      );
    }
  }
}

@mixin color($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.define-token-values(
        m3-tokens.get-color-tokens($theme)
    );
  } @else {
    @include sass-utils.current-selector-or-root() {
      @include token-utils.define-token-values-mixed(
        m2-tokens.get-color-tokens($theme)
      );
    }
  }
}

@mixin typography($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.define-token-values(
        m3-tokens.get-typography-tokens($theme)
    );
  } @else {
    @include sass-utils.current-selector-or-root() {
      @include token-utils.define-token-values-mixed(
        m2-tokens.get-typography-tokens($theme)
      );
    }
  }
}

@mixin density($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include token-utils.define-token-values(
        m3-tokens.get-density-tokens($theme)
    );
  } @else {
    @include sass-utils.current-selector-or-root() {
      @include token-utils.define-token-values-mixed(
        m2-tokens.get-density-tokens($theme)
      );
    }
  }
}

/// Defines the tokens that will be available in the `overrides` mixin and for docs extraction.
@function _define-overrides() {
  @return (
    (
      namespace: (mat),
      tokens: m3-tokens.get-system-fallbacks(),
      overrideTransforms: $overrideTransforms,
    ),
  );
}

/// Map of override keys that should be transformed to their corresponding token name
$overrideTransforms: (
  elevated-container-shape: elevated-card-container-shape,
  outlined-container-shape: outlined-card-container-shape,
  outlined-outline-width: outlined-card-outline-width,
  elevated-container-color: elevated-card-container-color,
  elevated-container-elevation: elevated-card-container-elevation,
  outlined-container-color: outlined-card-container-color,
  outlined-outline-color: outlined-card-outline-color,
  outlined-container-elevation: outlined-card-container-elevation
);

@mixin overrides($tokens: ()) {
  $override-tokens: ();
  @each $key, $value in $tokens {
    $token: map.get($overrideTransforms, $key) or $key;
    $override-tokens: map.set($override-tokens, $token, $value);
  }

  @include token-utils.batch-create-token-values($override-tokens, _define-overrides()...);
}

@mixin theme($theme) {
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {
    @include base($theme);
    @if inspection.theme-has($theme, color) {
      @include color($theme);
    }
    @if inspection.theme-has($theme, density) {
      @include density($theme);
    }
    @if inspection.theme-has($theme, typography) {
      @include typography($theme);
    }
  }
}
