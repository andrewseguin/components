//
// Design system display name: Material 3
// Design system version: v0.161
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@use './md-ref-palette';

// Indicates whether alternative tokens should be used
$_alternate-tokens: false;

$_default-dark: (
  md-ref-palette: md-ref-palette.md-ref-palette-values(),
);

@function md-sys-color-values-dark($palettes) {
  $values: (
    background: (neutral, 6),
    error: (error, 80),
    error-container: (error, 30),
    inverse-on-surface: (neutral, 20),
    inverse-primary: (primary, 40),
    inverse-surface: (neutral, 90),
    on-background: (neutral, 90),
    on-error: (error, 20),
    on-error-container: (error, 90),
    on-primary: (primary, 20),
    on-primary-container: (primary, 90),
    on-primary-fixed: (primary, 10),
    on-primary-fixed-variant: (primary, 30),
    on-secondary: (secondary, 20),
    on-secondary-container: (secondary, 90),
    on-secondary-fixed: (secondary, 10),
    on-secondary-fixed-variant: (secondary, 30),
    on-surface: (neutral, 90),
    on-surface-variant: (neutral-variant, 90),
    on-tertiary: (tertiary, 20),
    on-tertiary-container: (tertiary, 90),
    on-tertiary-fixed: (tertiary, 10),
    on-tertiary-fixed-variant: (tertiary, 30),
    outline: (neutral-variant, 60),
    outline-variant: (neutral-variant, 30),
    primary: (primary, 80),
    primary-container: (primary, 30),
    primary-fixed: (primary, 90),
    primary-fixed-dim: (primary, 80),
    scrim: (neutral, 0),
    secondary: (secondary, 80),
    secondary-container: (secondary, 30),
    secondary-fixed: (secondary, 90),
    secondary-fixed-dim: (secondary, 80),
    shadow: (neutral, 0),
    surface: (neutral, 6),
    surface-bright: (neutral, 24),
    surface-container: (neutral, 12),
    surface-container-high: (neutral, 17),
    surface-container-highest: (neutral, 22),
    surface-container-low: (neutral, 10),
    surface-container-lowest: (neutral, 4),
    surface-dim: (neutral, 6),
    surface-tint: (primary, 80),
    surface-variant: (neutral-variant, 30),
    tertiary: (tertiary, 80),
    tertiary-container: (tertiary, 30),
    tertiary-fixed: (tertiary, 90),
    tertiary-fixed-dim: (tertiary, 80)
  );

  @if ($_alternate-tokens) {
    $values: map.merge($values, (
      background: (neutral, 10),
      on-surface-variant: (neutral-variant, 80),
      surface: (neutral, 10),
      surface-bright: #37393b,
      surface-container: #1e1f20,
      surface-container-high: #282a2c,
      surface-container-highest: #333537,
      surface-container-low: #1b1b1b,
      surface-container-lowest: #0e0e0e,
      surface-dim: #131313,
      surface-tint: #d1e1ff,
    ));
  }

  @return get-m3-colors($palettes, $values);
}

$_default-light: (
  md-ref-palette: md-ref-palette.md-ref-palette-values(),
);

@function md-sys-color-values-light($palettes) {
  $values: (
    background: (neutral, 98),
    error: (error, 40),
    error-container: (error, 90),
    inverse-on-surface: (neutral, 95),
    inverse-primary: (primary, 80),
    inverse-surface: (neutral, 20),
    on-background: (neutral, 10),
    on-error: (error, 100),
    on-error-container: (error, 30),
    on-primary: (primary, 100),
    on-primary-container: (primary, 30),
    on-primary-fixed: (primary, 10),
    on-primary-fixed-variant: (primary, 30),
    on-secondary: (secondary, 100),
    on-secondary-container: (secondary, 30),
    on-secondary-fixed: (secondary, 10),
    on-secondary-fixed-variant: (secondary, 30),
    on-surface: (neutral, 10),
    on-surface-variant: (neutral-variant, 30),
    on-tertiary: (tertiary, 100),
    on-tertiary-container: (tertiary, 30),
    on-tertiary-fixed: (tertiary, 10),
    on-tertiary-fixed-variant: (tertiary, 30),
    outline: (neutral-variant, 50),
    outline-variant: (neutral-variant, 80),
    primary: (primary, 40),
    primary-container: (primary, 90),
    primary-fixed: (primary, 90),
    primary-fixed-dim: (primary, 80),
    scrim: (neutral, 0),
    secondary: (secondary, 40),
    secondary-container: (secondary, 90),
    secondary-fixed: (secondary, 90),
    secondary-fixed-dim: (secondary, 80),
    shadow: (neutral, 0),
    surface: (neutral, 98),
    surface-bright: (neutral, 98),
    surface-container: (neutral, 94),
    surface-container-high: (neutral, 92),
    surface-container-highest: (neutral, 90),
    surface-container-low: (neutral, 96),
    surface-container-lowest: (neutral, 100),
    surface-dim: (neutral, 87),
    surface-tint: (primary, 40),
    surface-variant: (neutral-variant, 90),
    tertiary: (tertiary, 40),
    tertiary-container: (tertiary, 90),
    tertiary-fixed: (tertiary, 90),
    tertiary-fixed-dim: (tertiary, 80)
  );

  @if ($_alternate-tokens) {
    $values: map.merge($values, (
      background: (neutral, 100),
      on-error-container: (error, 10),
      on-primary-container: (primary, 10),
      on-secondary-container: (secondary, 10),
      on-tertiary-container: (tertiary, 10),
      surface: (neutral, 100),
      surface-bright: (neutral, 100),
      surface-container: #f0f4f9,
      surface-container-high: #e9eef6,
      surface-container-highest: #dde3ea,
      surface-container-low: #f8fafd,
      surface-container-lowest: (primary, 100),
      surface-dim: #d3dbe5,
      surface-tint: #6991d6,
    ));
  }

  @return get-m3-colors($palettes, $values);
}

@function get-m3-colors($palettes, $values) {
  $colors: ();
  @each $key, $value in $values {
    @if (meta.type-of($value) == 'list') {
      $palette: list.nth($value, 1);
      $hue: list.nth($value, 2);
      @if $palette == 'primary' {
        $colors: map.set($colors, $key, map.get($palettes, $hue));
      } @else {
        $colors: map.set($colors, $key, map.get($palettes, $palette, $hue));
      }
    } @else {
      $colors: map.set($colors, $key, map.get($palettes, $value));
    }
  }
  @return $colors;
}
